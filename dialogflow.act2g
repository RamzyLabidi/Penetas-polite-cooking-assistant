use dialogue as knowledge.
use patterns as knowledge.

define say(Text) with
	pre { not(waiting) }
	post { waitingForEvent('TextDone') }

define stopTalking with
	pre { true }
	post { true }

define playAudio(Url) with
	pre { not(waiting) }
	post { waitingForEvent('PlayAudioDone') }
	
% Bot start/stop actions (input modalities)	
define startListening(Seconds, Context) with
	pre { not(waiting) }
	post { waitingForEvent('ListeningDone') }
	
define stopListening with
	pre { true }
	post { true }
	
% DialogFlow Control	
define setLanguage(Lang) with
	pre { true }
	post { waitingForEvent('LanguageChanged') }
	
% Browser actions
define renderPage(Html) with
	pre { true }
	post { true }

%%% Sequence actions (internal)
% Add new empty sequence at the head of the session
define startNewSequence as internal with
	pre  { session(List), append([ [] ], List, NewList), stepCounter(Cnt) }
	post { not(stepCounter(Cnt)), not(session(List)), session(NewList),  stepCounter(-1) }


% Add id of conversation pattern to the currently empty sequence at the start of the session
define updateSession(PatternId) as internal with
	pre	 { session([ [] | T ]) }
	post { not(session([ [] | T])), session([ [PatternId] | T]) }

% Add id of conversation pattern as subpattern to currently active pattern (head of session)
define expandSession(SubPatternId) as internal with
	pre { session([H | T]), add(H, [SubPatternId], NewH) }
	post { not(session([H | T])), session([NewH | T]) }

% Restart the agenda once the new
%define resetAgenda(HeadAgenda, NewAgenda) as internal with
%	pre{agenda(Agenda), append(HeadAgenda, Agenda, NewAgenda)} 
%	post{not(agenda(Agenda)), agenda(NewAgenda)}
